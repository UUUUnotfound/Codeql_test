/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.net.URLEncoder;
import java.net.URLDecoder;
import net.sf.json.*;
import java.util.*;
import java.util.zip.*;
import java.io.*;
import weaver.general.*;
import weaver.file.*;
import DBstep.iMsgServer2000;
import weaver.hrm.*;
import weaver.mobile.plugin.ecology.service.EMessageService;
import weaver.conn.*;
import weaver.file.ImageFileManager;

public class _download__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("application/x-download");
    response.setCharacterEncoding("UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      weaver.mobile.plugin.ecology.service.PluginServiceImpl ps;
      ps = (weaver.mobile.plugin.ecology.service.PluginServiceImpl) pageContext.getAttribute("ps");
      if (ps == null) {
        ps = new weaver.mobile.plugin.ecology.service.PluginServiceImpl();
        pageContext.setAttribute("ps", ps);
      }
      
//\u4e0a\u9762\u8fd9\u53e5\u8bdd\u7684<%\u4e00\u5b9a\u4e0d\u8981\u6572\u5230\u4e0b\u9762\u6765\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u8f93\u51fa\u7684\u9644\u4ef6\u6253\u4e0d\u5f00\u6216\u5185\u5bb9\u4e71\u7801
String userid = Util.null2String(request.getParameter("userid"));
String markId = Util.null2String(request.getParameter("markId"));
String url = Util.null2String(request.getParameter("url"));
String sessionkey = Util.null2String(request.getParameter("sessionkey"));
//\u6765\u81ea\u4e8e\u624b\u673a\u7248\u7684\u90ae\u4ef6\u9644\u4ef6\u4e0b\u8f7d
String form_email= Util.null2String(request.getParameter("form_email"));

String from= Util.null2String(request.getParameter("from"));

//\u662f\u5426\u7f29\u7565\u56fe
String thumbnail= Util.null2String(request.getParameter("thumbnail"));

if(ps.verify(sessionkey)) {

	String filepath = "";
	String iszip = "";
	String filename = "";
	String contenttype = "";
	String markType = "";
	String isaesencrypt="";
	String aescode = "";
	InputStream is = null;
	
	if("emessage".equals(from)) {
		filename = url;
		filepath = EMessageService.getCachePath() + File.separator + filename;
		
		if("1".equals(thumbnail)) {
			int pos = url.lastIndexOf('.');
			filename = (pos == -1) ? url : url.substring(0, pos);
			filename += ".jpg";
			filepath = EMessageService.getCachePath() + File.separator + "thumbnail" + File.separator + filename;
		}
		
		File file = new File(filepath);
		if(file.exists() && file.getCanonicalPath().startsWith(EMessageService.getCachePath())) {
			is = new BufferedInputStream(new FileInputStream(file));
		}
	} else if("1".equals(form_email)){//\u624b\u673a\u90ae\u4ef6\u7684\u9644\u4ef6
			String emlsql ="select isaesencrypt,aescode,filerealpath,iszip,filename,filetype  from mailresourcefile where id="+url;
		 	RecordSet rs = new RecordSet();
		     	rs.executeSql(emlsql);
			if(rs.next()) {
				filepath = rs.getString("filerealpath");
				iszip = rs.getString("iszip");
				filename = rs.getString("filename");
				contenttype = rs.getString("filetype");
				isaesencrypt = rs.getString("isaesencrypt");
				aescode = rs.getString("aescode");
				

				//\u90ae\u4ef6\u9644\u4ef6\u76ee\u524d\u8fd8\u6ca1\u6709\u5b58\u653e\u5230\u963f\u91cc\u4e91
				File file = new File(filepath);
				if (Util.getIntValue(iszip) > 0) {
					ZipInputStream zin = new ZipInputStream(new FileInputStream(file));
					if (zin.getNextEntry() != null)
						is = new BufferedInputStream(zin);
				} else {
					is = new BufferedInputStream(new FileInputStream(file));
				}
				
				if(isaesencrypt.equals("1")){
					is = AESCoder.decrypt(is,aescode);
				}
				/*
				ImageFileManager imageFileManager=new ImageFileManager();
                imageFileManager.getImageFileInfoById(Util.getIntValue(url,0));
                is=imageFileManager.getInputStream();
				*/
			
			}
	}else{

				if (markId!=""&&userid!="") {
					//\u7535\u5b50\u7b7e\u7ae0\u7684\u524d\u7aef\u663e\u793a\u6539\u7528\u5176\u5b83\u5730\u5740\u3002
					return;
				} else {
					if(Util.getIntValue(url)>0) {
						
						RecordSet rs = new RecordSet();
						
						String sql = "select a.isaesencrypt,a.aescode,b.imagefilename,a.imagefiletype,a.filerealpath,a.iszip from imagefile a LEFT join docimagefile b ON a.imagefileid = b.imagefileid where a.imagefileid = " + url;
						
						rs.executeSql(sql);
						
						if(rs.next()) {
					
							filepath = rs.getString("filerealpath");
							iszip = rs.getString("iszip");
							filename = rs.getString("imagefilename");
							contenttype = rs.getString("imagefiletype");
							isaesencrypt = rs.getString("isaesencrypt");
							aescode = rs.getString("aescode");
							
							String extName = "";
							if(filename.indexOf(".") > -1){
								int bx = filename.lastIndexOf(".");
								extName = filename.substring(bx+1, filename.length());
							}
							
							/*File file = new File(filepath);
							if (Util.getIntValue(iszip) > 0) {
								ZipInputStream zin = new ZipInputStream(new FileInputStream(file));
								if (zin.getNextEntry() != null)
									is = new BufferedInputStream(zin);
							} else {
								is = new BufferedInputStream(new FileInputStream(file));
							}
							if(isaesencrypt.equals("1")){
								is = AESCoder.decrypt(is,aescode);
							}*/
							ImageFileManager imageFileManager=new ImageFileManager();
                            imageFileManager.getImageFileInfoById(Util.getIntValue(url,0));
                            is=imageFileManager.getInputStream();
							if("xls".equalsIgnoreCase(extName) || "doc".equalsIgnoreCase(extName) || "ppt".equalsIgnoreCase(extName)
									|| "xlsx".equalsIgnoreCase(extName) || "docx".equalsIgnoreCase(extName) || "pptx".equalsIgnoreCase(extName)
									|| "wps".equalsIgnoreCase(extName) || "et".equalsIgnoreCase(extName)) {
								//\u6b63\u6587\u7684\u5904\u7406
								ByteArrayOutputStream bout = null;
								try {
									int byteread = 0;
									byte[] rbs = new byte[2048];
									bout = new ByteArrayOutputStream();
					                while((byteread = is.read(rbs)) != -1) {
					                    bout.write(rbs, 0, byteread);
					                    bout.flush();
					                }
					                byte[] fileBody = bout.toByteArray();
					                iMsgServer2000 MsgObj = new DBstep.iMsgServer2000();
									MsgObj.MsgFileBody(fileBody);			//\u5c06\u6587\u4ef6\u4fe1\u606f\u6253\u5305
									fileBody = MsgObj.ToDocument(MsgObj.MsgFileBody());    //\u901a\u8fc7iMsgServer200 \u5c06pgf\u6587\u4ef6\u6d41\u8f6c\u5316\u4e3a\u666e\u901aOffice\u6587\u4ef6\u6d41
					                is = new ByteArrayInputStream(fileBody);
					                bout.close();
								}
								catch(Exception e) {
									if(bout!=null) {
										bout.close();
									}
								}
							}
						
						}
					} else {
						Enumeration enumeration = request.getParameterNames();
						while (enumeration.hasMoreElements()) {
							String parameterName = (String) enumeration.nextElement();
							if(parameterName.equals("sessionkey")) continue;
							if(parameterName.equals("url")) continue;
							String urlSeparator = "&";
							if(url.indexOf("?")==-1) urlSeparator = "?";
							if(url.indexOf(parameterName)==-1) {
								Object parameterValue = request.getParameter(parameterName);
								String value = parameterValue.toString();
								url += urlSeparator + parameterName + "=" + value;
							}
						}
						request.getRequestDispatcher(url).forward(request, response);
						return;
					}
				}
	}
	
	if(is != null) {
		
			
			try {
				
				response.setHeader("Content-disposition","attachment; filename=" + URLEncoder.encode(filename,"UTF-8"));

				byte[] rbs = new byte[2048];
				OutputStream outp = response.getOutputStream();
				int len = 0;
				while (((len = is.read(rbs)) > 0)) {
					outp.write(rbs, 0, len);
				}

				outp.flush();
				//out.clear();
				out = pageContext.pushBody();

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (is != null) {
					is.close();
					is = null;
				}
			}
			return;
	} else {
		response.sendError(HttpServletResponse.SC_NOT_FOUND);
	}
}

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/Download.jsp"), 7081540926418199240L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }
}
