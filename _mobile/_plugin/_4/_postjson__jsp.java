/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin._4;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import net.sf.json.*;
import java.util.*;
import java.text.*;
import weaver.file.*;
import weaver.general.*;
import weaver.hrm.*;

public class _postjson__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      weaver.mobile.plugin.ecology.service.ScheduleService scheduleService;
      scheduleService = (weaver.mobile.plugin.ecology.service.ScheduleService) pageContext.getAttribute("scheduleService");
      if (scheduleService == null) {
        scheduleService = new weaver.mobile.plugin.ecology.service.ScheduleService();
        pageContext.setAttribute("scheduleService", scheduleService);
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      
request.setCharacterEncoding("UTF-8");
User user = HrmUserVarify.getUser (request , response) ;
if(user==null) {
	Map result = new HashMap();
	//\u672a\u767b\u5f55\u6216\u767b\u5f55\u8d85\u65f6
	result.put("error", "remote server session time out");
	
	JSONObject jo = JSONObject.fromObject(result);
	out.println(jo);
	
	return;
}

response.setContentType("application/json;charset=UTF-8");

FileUpload fu = new FileUpload(request);

String module = Util.null2String(fu.getParameter("module"));
String scope = Util.null2String(fu.getParameter("scope"));

String operation = Util.null2String(fu.getParameter("operation"));
String detailid = Util.null2String(fu.getParameter("detailid"));//\u65e5\u7a0bid

String title = Util.null2String(fu.getParameter("title"));//\u6807\u9898
String notes = Util.null2String(fu.getParameter("notes"));//\u63cf\u8ff0

SimpleDateFormat sourceDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
String startdatestr = Util.null2String(fu.getParameter("startdate"));//\u5f00\u59cb\u65f6\u95f4 yyyy-MM-dd HH:mm:ss
Date startdate = null;
try {startdate = sourceDate.parse(startdatestr);} catch (Exception e) {}
String enddatestr = Util.null2String(fu.getParameter("enddate"));//\u5f00\u59cb\u65f6\u95f4 yyyy-MM-dd HH:mm:ss
Date enddate = null;
try {enddate = sourceDate.parse(enddatestr);} catch (Exception e) {}

String urgentlevel  = Util.null2String(fu.getParameter("urgentlevel"));//\u7d27\u6025\u7a0b\u5ea6
String touser = Util.null2String(fu.getParameter("touser"));//\u63a5\u6536\u4eba
String scheduletype = Util.null2String(fu.getParameter("scheduletype"));//\u65e5\u7a0b\u7c7b\u578b
String alarmway = Util.null2String(fu.getParameter("alarmway"));//\u63d0\u9192\u65b9\u5f0f(\u77ed\u4fe1...)
String alarmstart = fu.getParameter("alarmstart");//\u5f00\u59cb\u524d\u63d0\u9192\u65f6\u95f4(10\u5206\u949f...)
String alarmend = fu.getParameter("alarmend");//\u7ed3\u675f\u524d\u63d0\u9192\u65f6\u95f4(10\u5206\u949f...)

Map<String, String> scheduleMap = new HashMap<String, String>();
scheduleMap.put("id", detailid);//\u65e5\u7a0bid
scheduleMap.put("workPlanType", scheduletype);//\u65e5\u7a0b\u7c7b\u578b
scheduleMap.put("planName", title);//\u6807\u9898
scheduleMap.put("urgentLevel", urgentlevel);//\u7d27\u6025\u7a0b\u5ea6(1.[\u4e00\u822c]/2.\u91cd\u8981/3.\u7d27\u6025)
scheduleMap.put("remindType", alarmway);//\u63d0\u9192\u7c7b\u578b(1.[\u4e0d\u63d0\u9192]/2.\u77ed\u4fe1/3.\u90ae\u4ef6)
if(Util.getIntValue(alarmstart,0) > 0) {
	scheduleMap.put("remindBeforeStart", "1");//\u662f\u5426\u5f00\u59cb\u524d\u63d0\u9192
	scheduleMap.put("remindTimesBeforeStart", alarmstart);//\u5f00\u59cb\u524d\u63d0\u9192\u65f6\u95f4 min
}
if(Util.getIntValue(alarmend,0) > 0) {
	scheduleMap.put("remindBeforeEnd", "1");//\u662f\u5426\u7ed3\u675f\u524d\u63d0\u9192
	scheduleMap.put("remindTimesBeforeEnd", alarmend);//\u7ed3\u675f\u524d\u63d0\u9192\u65f6\u95f4 min
}
scheduleMap.put("memberIDs", touser);//\u7cfb\u7edf\u53c2\u4e0e\u4eba(1,2,3...)

SimpleDateFormat targetDate = new SimpleDateFormat("yyyy-MM-dd");
SimpleDateFormat targetTime = new SimpleDateFormat("HH:mm");
if(startdate != null){
	scheduleMap.put("beginDate", targetDate.format(startdate));//\u5f00\u59cb\u65e5\u671f yyyy-MM-dd
	scheduleMap.put("beginTime", targetTime.format(startdate));//\u5f00\u59cb\u65f6\u95f4 HH:mm
} else {
	scheduleMap.put("beginDate", targetDate.format(new Date()));//\u5f00\u59cb\u65e5\u671f yyyy-MM-dd
	scheduleMap.put("beginTime", targetTime.format(new Date()));//\u5f00\u59cb\u65f6\u95f4 HH:mm
}
if(enddate != null){
	scheduleMap.put("endDate", targetDate.format(enddate));//\u7ed3\u675f\u65e5\u671f yyyy-MM-dd
	scheduleMap.put("endTime", targetTime.format(enddate));//\u7ed3\u675f\u65f6\u95f4 HH:mm
}
scheduleMap.put("description", notes);//\u5185\u5bb9
scheduleMap.put("crmIDs", "");//\u76f8\u5173\u5ba2\u6237
scheduleMap.put("docIDs", "");//\u76f8\u5173\u6587\u6863
scheduleMap.put("projectIDs", "");//\u76f8\u5173\u9879\u76ee
scheduleMap.put("taskIDs", "");//\u76f8\u5173\u9879\u76ee\u4efb\u52a1
scheduleMap.put("requestIDs", "");//\u76f8\u5173\u6d41\u7a0b

Map result = new HashMap();

if("create".equals(operation)) {
	result = scheduleService.createSchedule(scheduleMap, user);
} else if("edit".equals(operation)) {
	result = scheduleService.editSchedule(scheduleMap, user);
} else if("del".equals(operation)) {
	result = scheduleService.delSchedule(detailid, user);
} else if("over".equals(operation)) {
	result = scheduleService.overSchedule(detailid, user);
}

JSONObject jo = JSONObject.fromObject(result);
out.println(jo);

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/4/postjson.jsp"), -4226170387431269997L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
  }
}
