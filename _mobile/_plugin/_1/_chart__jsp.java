/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin._1;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.*;
import weaver.hrm.*;
import weaver.systeminfo.*;
import weaver.general.*;
import weaver.workflow.layout.RequestDisplayInfo;
import weaver.conn.RecordSet;
import net.sf.json.JSONObject;

public class _chart__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/html; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
request.setCharacterEncoding("UTF-8");
response.setContentType("text/html;charset=UTF-8");

User user = HrmUserVarify.getUser(request , response) ;
int requestid = Util.getIntValue(request.getParameter("requestid"), -1) ;
String type = Util.null2String(request.getParameter("type"));
int workflowid = Util.getIntValue((String)request.getParameter("workflowid"), 0);


RecordSet rst = new RecordSet();
if (workflowid == 0) {
	// \u67e5\u8be2\u8bf7\u6c42\u7684\u76f8\u5173\u5de5\u4f5c\u6d41\u57fa\u672c\u4fe1\u606f
	rst.executeProc("workflow_Requestbase_SByID", requestid + "");
	if (rst.next()) {
		workflowid = Util.getIntValue(rst.getString("workflowid"), 0);
	}
}

Map result = new HashMap();
List nodes = new ArrayList();
List lines = new ArrayList();
List groups = new ArrayList();
result.put("nodes", nodes);
result.put("lines", lines);
result.put("groups", groups);

RequestDisplayInfo reqDisplayInfo = new RequestDisplayInfo(String.valueOf(workflowid), String.valueOf(requestid));
reqDisplayInfo.setIsnewDesign(false);
reqDisplayInfo.setUser(user);
Map reqDisBean = reqDisplayInfo.getReqDisInfo();

List nodeDisInfo = (List)reqDisBean.get("nodeinfo");
List nodeLinkLineInfo = (List)reqDisBean.get("lineinfo");

int maxWidth = 0;
int maxHeight = 0;

boolean isold = false;

for (Iterator it=nodeLinkLineInfo.iterator(); it.hasNext();) {
	Map bean = (Map)it.next();
	Map line = new HashMap();
	
	boolean ispass = Boolean.parseBoolean(Util.null2String((String)bean.get("ispass")));

	String startDirection = Util.getIntValue((String)bean.get("startDirection"), -1) + "";
	String endDirection = Util.getIntValue((String)bean.get("endDirection"), -1) + "";
	String points = (String)bean.get("points");
	String newPoints = Util.null2String((String)bean.get("newPoints"));
	String isFreeNode = Util.null2String((String)bean.get("isFreeNode"));
	
	if (!"".equals(newPoints)) {
		String[] ps = newPoints.split(",");
		
		if (ps.length >= 4) {
			newPoints = "";
			for (int j=0; j<ps.length; j+=2) {
				double point =  Double.parseDouble(ps[j]);
				double point2 =  Double.parseDouble(ps[j + 1]);
				
				if (j == 0) {
					if (Integer.parseInt(startDirection) == 90) {
						point += 10;
					} else if (Integer.parseInt(startDirection) == 180) {
						point2 += 10;
					} else if (Integer.parseInt(startDirection) == -90) {
						point -= 10;
					} else if (Integer.parseInt(startDirection) == 0) {
						point2 -= 10;
					} 
				}
				
				if (j == ps.length - 2) {
					if (Integer.parseInt(endDirection) == 90) {
						point += 10;
					} else if (Integer.parseInt(endDirection) == 180) {
						point2 += 10;
					} else if (Integer.parseInt(endDirection) == -90) {
						point -= 10;
					} else if (Integer.parseInt(endDirection) == 0) {
						point2 -= 10;
					} 
				}
				newPoints += point + "," + point2 + ",";
			}
			newPoints = newPoints.substring(0, newPoints.length() - 1);
		}
	} else {
		isold = true;
	}
	if(points.equals("") && "1".equals(isFreeNode)){
	   String directfrom = Util.null2String((String)bean.get("directfrom"));
	   String directto = Util.null2String((String)bean.get("directto"));
       RecordSet  directrs = new RecordSet();
	   String x1="",y1="",x2="",y2="";
	   String directsql1 = " SELECT drawxpos,drawypos FROM workflow_nodebase  WHERE id="+directfrom;
       directrs.executeSql(directsql1);
	   if(directrs.next()){
          x1 = (Util.getIntValue(directrs.getString("drawxpos"),-1)+50) +"";
		  y1 = Util.getIntValue(directrs.getString("drawypos"),-1) +"";
	   }
       String directsql2 = " SELECT drawxpos,drawypos FROM workflow_nodebase  WHERE id="+directto;
       directrs.executeSql(directsql2);
	   if(directrs.next()){
          x2 = (Util.getIntValue(directrs.getString("drawxpos"),-1)-50) +"";
		  y2 = Util.getIntValue(directrs.getString("drawypos"),-1)+"";
	   }
	   points = x1+","+y1+","+x2+","+y2;
	}
	line.put("newPoints", newPoints);
	line.put("points", points);
	line.put("ispass", ispass);
	lines.add(line);
}
//\u5bf9\u6570\u636e\u505a\u9884\u5904\u7406 START
Iterator iterator = nodeDisInfo.iterator();
for(int icount=0; iterator.hasNext(); icount++) {
	Map bean = (Map)iterator.next();
	Map nodeBean = new HashMap();
	int nodetype = Util.getIntValue((String)bean.get("ntype")); //nodetype
	String nodeattribute = (String)bean.get("nodeattribute"); //nodeattribute
	int optType = ((Integer)bean.get("nodeType")).intValue(); //\u8282\u70b9\u72b6\u6001  0: \u5df2\u901a\u8fc7  1: \u5f53\u524d 2:\u5176\u5b83
	
	String nodeImageName = "";
	if (nodetype == 0) {
		nodeImageName = "c";  //\u8d77\u59cb\u8282\u70b9
		if (isold) {
			nodeBean.put("width", 90);
			nodeBean.put("height", 90);
		} else {
			nodeBean.put("width", 82);
			nodeBean.put("height", 82);
		}
	} else if (nodetype == 1) {
		nodeImageName = "a";  //\u5ba1\u6279\u8282\u70b9 
		if (isold) {
			nodeBean.put("width", 100);
			nodeBean.put("height", 90);
		} else {
			nodeBean.put("width", 100);
			nodeBean.put("height", 90);
		}
	} else if (nodetype == 2) {
		nodeImageName = "r";  //\u63d0\u4ea4\u8282\u70b9
		if (isold) {
			nodeBean.put("width", 100);
			nodeBean.put("height", 70);
		} else {
			nodeBean.put("width", 100);
			nodeBean.put("height", 62);
		}
	} else if (nodetype == 3) {
		nodeImageName = "p";  //\u5f52\u6863\u8282\u70b9
		
		if (isold) {
			nodeBean.put("width", 90);
			nodeBean.put("height", 90);
		} else {
			nodeBean.put("width", 82);
			nodeBean.put("height", 82);
		}
	}
	
	//\u56fe\u7247\u8bf4\u660e\uff1a*1\uff1a\u672a\u901a\u8fc7\u8282\u70b9\u7684
	//*2\uff1a\u5f53\u524d\u8282\u70b9\u7684
	//*3\uff1a\u5df2\u901a\u8fc7\u8fc7\u8282\u70b9\u7684
	if (optType == 1) {
		nodeImageName += "2_wev8.png";
	} else if (optType == 0) {
		nodeImageName += "3_wev8.png";
	} else {
		nodeImageName += ".png";
	}
	
	String nodeNotOperatorNames = "";
	String nodeViewNames = "";
	String nodeOperatorNames = "";
	List nodeNotOperatorNameList = null;
	
	if (optType == 2) {
		nodeNotOperatorNameList = (List)bean.get("nodeOperatorNameList"); //\u672a\u64cd\u4f5c\u8005\u4fe1\u606f
	} else {
		nodeNotOperatorNameList = (List)bean.get("nodeNotOperatorNameList"); //\u672a\u64cd\u4f5c\u8005\u4fe1\u606f
	}
	
	List nodeViewNameList = (List)bean.get("nodeViewNameList"); //\u67e5\u770b\u8005\u4fe1\u606f
	List nodeOperatorNameList = (List)bean.get("nodeOperatorNameList");  //\u5df2\u64cd\u4f5c\u8005\u4fe1\u606f
	for (Iterator it=nodeNotOperatorNameList.iterator(); it.hasNext();) {
		nodeNotOperatorNames += it.next() + " ";
    }
	for (Iterator it=nodeOperatorNameList.iterator(); it.hasNext();) {
		nodeOperatorNames += it.next() + " ";
    }
	for (Iterator it=nodeViewNameList.iterator(); it.hasNext();) {
		nodeViewNames += it.next() + " ";
    }
	
	int x = ((int[])bean.get("nodeDecPoint"))[0] ;
	int y = ((int[])bean.get("nodeDecPoint"))[1];
	
	if (isold) {
		x = x- 30 -20;
		y = y - 30 - 10;
	} else {
		x = x - 30 - 20 + 2 + 3;
		y = y - 30 + 3 + 3;
	}
	if (x + 150 > maxWidth) {
		maxWidth = x + 150;
	}
	if (y + 150 > maxHeight) {
		maxHeight = y + 150;
	}
	
	//\u8282\u70b9\u540d\u79f0
	nodeBean.put("id", bean.get("nodeid"));
	nodeBean.put("nodeName", bean.get("nodeName"));
	nodeBean.put("x", x);
	nodeBean.put("y", y);
	nodeBean.put("operatorName", Util.null2String((String)bean.get("nodeOperatorName")));
	nodeBean.put("notOperatorNames", nodeNotOperatorNames);
	nodeBean.put("viewOperatorNames", nodeViewNames);
	nodeBean.put("operatorNames", nodeOperatorNames);
	nodeBean.put("imgName", nodeImageName);
	nodeBean.put("nodeType", nodetype);
	nodeBean.put("operatortType", optType);
	
	nodes.add(nodeBean);
}

//\u5bf9\u6570\u636e\u505a\u9884\u5904\u7406 END

RecordSet rs = new RecordSet();
rs.execute("select * from workflow_groupinfo where workflowid=" + workflowid);

while (rs.next()) {
   	Map group = new HashMap();
   	//group.put("id", rs.getInt("id"));
   	//group.put("workflowid", rs.getInt("workflowid"));
   	group.put("text", Util.toXmlText(rs.getString("groupname")));
   	
   	int direction = rs.getInt("direction");
   	int x = rs.getInt("x");
   	int y = rs.getInt("y");
   	int width = rs.getInt("width");
   	int height = rs.getInt("height");
   	
   	if (direction == 0) {
		if (x + width > maxWidth) {
			maxWidth = x + width;
		}
		if (y + height > maxHeight) {
			maxHeight = y + height;
		}
	} else if (direction == 1) {
		if (y + height > maxHeight) {
			maxHeight = y + height;
		}
	} else if (direction == 2) {
		if (x + width > maxWidth) {
			maxWidth = x + width;
		}
	}
   	
   	group.put("direction", direction);
   	group.put("x", x);
   	group.put("y", y);
   	group.put("width", width);
   	group.put("height", height);
   	groups.add(group);
}

result.put("maxWidth", maxWidth);
result.put("maxHeight", maxHeight);

JSONObject jo = JSONObject.fromObject(result);
response.getWriter().write(jo.toString());

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/1/chart.jsp"), -5039411197159823530L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n\r\n\r\n".toCharArray();
  }
}
