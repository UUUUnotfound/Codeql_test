/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin._1;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.*;
import weaver.hrm.*;
import weaver.systeminfo.*;
import weaver.general.*;
import weaver.workflow.layout.RequestDisplayInfo;
import weaver.conn.RecordSet;

public class _workflowpicdisplayinfo__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/html; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
request.setCharacterEncoding("UTF-8");
response.setContentType("text/html;charset=UTF-8");

String module = Util.null2String((String)request.getParameter("module"));
String scope = Util.null2String((String)request.getParameter("scope"));
String clienttype = Util.null2String((String)request.getParameter("clienttype"));
String clientlevel = Util.null2String((String)request.getParameter("clientlevel"));
boolean charsetgbk = "true".equals(Util.null2String((String)request.getParameter("charsetgbk")));
boolean ismobile = "true".equals(Util.null2String((String)request.getParameter("ismobile")));


	User user = HrmUserVarify.getUser(request , response) ;
	int workflowid =  Util.getIntValue(request.getParameter("wfid"), 0);
	
	
	int requestid = Util.getIntValue(request.getParameter("requestid"), -1);
	//\u67e5\u8be2formid isBill isCust id workflowname
	String isBill = "";
	String formid = "";
	String isCust = "";
	String workflowname = "";
	RecordSet rst = new RecordSet();
		if (workflowid == 0) {
			// \u67e5\u8be2\u8bf7\u6c42\u7684\u76f8\u5173\u5de5\u4f5c\u6d41\u57fa\u672c\u4fe1\u606f
			rst.executeProc("workflow_Requestbase_SByID", requestid + "");
			if (rst.next()) {
				workflowid = Util.getIntValue(rst.getString("workflowid"), 0);
			}
		}
		//\u67e5\u8be2\u8be5\u5de5\u4f5c\u6d41\u7684\u8868\u5355id\uff0c\u662f\u5426\u662f\u5355\u636e\uff080\u5426\uff0c1\u662f\uff09\uff0c\u5e2e\u52a9\u6587\u6863id
		rst.executeProc("workflow_Workflowbase_SByID", workflowid+"");
		if (rst.next()) {
			formid = Util.null2String(rst.getString("formid"));
			isCust = Util.null2String(rst.getString("isCust"));
			workflowname = Util.null2String(rst.getString("workflowname"));
			isBill = "" + Util.getIntValue(rst.getString("isbill"), 0);
		}
	RequestDisplayInfo reqDisplayInfo = new RequestDisplayInfo(String.valueOf(workflowid), String.valueOf(requestid));
	reqDisplayInfo.setIsnewDesign(false);
	reqDisplayInfo.setUser(user);
	Map reqDisBean = reqDisplayInfo.getReqDisInfo();
	List nodeDisInfo = (List)reqDisBean.get("nodeinfo");
	List nodeLinkLineInfo = (List)reqDisBean.get("lineinfo");
	
	String wfnodelindeXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><TopFlow id=\""+workflowid+"\" formid=\""+formid+"\" isBill=\""+isBill+"\" isCust=\""+isCust+"\" text=\""+Util.toXmlText(workflowname)+"\" isView=\"true\"><Procs>";
	//\u628a \u8282\u70b9\u64cd\u4f5c\u8005\u7684\u4fe1\u606f\u62fc\u63a5\u6210XML
		Iterator iterator = nodeDisInfo.iterator();
		for(int icount=0;iterator.hasNext();icount++) {
			Map picBean = (Map)iterator.next();
			int[] nodePoint = (int[])picBean.get("nodePoint");
			int[] nodeDecPoint = (int[])picBean.get("nodeDecPoint"); //\u8282\u70b9\u7684 x\u8f74 y\u8f74
			String nodeColor = (String)picBean.get("nodeColor");
			
			String nodeName = (String)picBean.get("nodeName");//nodename
			int optType = ((Integer)picBean.get("nodeType")).intValue(); //\u8282\u70b9\u72b6\u6001  0: \u5df2\u901a\u8fc7  1: \u5f53\u524d 2:\u5176\u5b83
			Object t_isPass = picBean.get("ispass");
			boolean ispass = false;
			if (t_isPass != null) {
				ispass = Boolean.parseBoolean(t_isPass.toString());
			}
			boolean iscurrent = false;
			Object t_iscurrent = picBean.get("iscurrent");
			if (t_iscurrent != null) {
				iscurrent = Boolean.parseBoolean(t_iscurrent.toString());
			}
			
	    	//String nodeOperatorName = (String)picBean.get("nodeOperatorName");
			//String nodeOperatorGropId = (String)picBean.get("nodeOperatorGropId");
			
			String nodeid = (String)picBean.get("nodeid"); //nodeid
			String nodetype = (String)picBean.get("ntype"); //nodetype
			String nodeattribute = (String)picBean.get("nodeattribute"); //nodeattribute
			
			
			List nodeNotOperatorNameList = (List)picBean.get("nodeNotOperatorNameList"); //\u4e3a\u64cd\u4f5c\u8005\u4fe1\u606f
			List nodeOperatorNameList = (List)picBean.get("nodeOperatorNameList");  //\u5df2\u64cd\u4f5c\u8005\u4fe1\u606f
			List nodeViewNameList = (List)picBean.get("nodeViewNameList"); //\u67e5\u770b\u8005\u4fe1\u606f
			//List nodeOperatorGropIdList = (List)picBean.get("nodeOperatorGropIdList");
			//boolean isCurrentNode = (Boolean)picBean.get("isCurrentNode");
			String nodeOperatorName = Util.null2String((String)picBean.get("nodeOperatorName"));
			
			String nodeNotOperatorNames = "";
			String nodeOperatorNames = "";
			String nodeViewNames = "";
				String splitstring = " ";
				if (reqDisplayInfo.isIsnewDesign()) {
					splitstring = "_#WFSPSTR#_";
				}
				for (int i=0; i<nodeNotOperatorNameList.size(); i++) {
					if (i != 0) {
						nodeNotOperatorNames += splitstring;
					}
					nodeNotOperatorNames += nodeNotOperatorNameList.get(i);
				}
				for (int i=0; i<nodeOperatorNameList.size(); i++) {
					if (i != 0) {
						nodeOperatorNames += splitstring;
					}
					nodeOperatorNames += nodeOperatorNameList.get(i);
				}
				
				for (int i=0; i<nodeViewNameList.size(); i++) {
					if (i != 0) {
						nodeViewNames += splitstring;
					}
					nodeViewNames += nodeViewNameList.get(i);
				}
				
				//for (Iterator it=nodeNotOperatorNameList.iterator(); it.hasNext();) {
				//	nodeNotOperatorNames += it.next() + splitstring;
			    //}
				//for (Iterator it=nodeOperatorNameList.iterator(); it.hasNext();) {
				//	nodeOperatorNames += it.next() + splitstring;
			    //}
				//for (Iterator it=nodeViewNameList.iterator(); it.hasNext();) {
				//	nodeViewNames += it.next() + splitstring;
			    //}
				
					wfnodelindeXml += "<Proc>"
						+"<BaseProperties id=\""+nodeid+"\" nodeOperatorName=\"" + nodeOperatorName  + "\" nodeViewNames=\""+nodeViewNames+"\"  nodeOperatorNames=\""+nodeOperatorNames+"\"  nodeNotOperatorNames=\""+nodeNotOperatorNames+"\"  text=\""+Util.toXmlText(nodeName)+"\"  hasNodePro=\"false\" "
						+"hasCusRigKey=\"false\"  hasNodeBefAddOpr=\"false\"  hasNodeAftAddOpr=\"false\" "
						+"hasLogViewSco=\"false\"  hasNodeForFie=\"false\"  nodetype=\""+nodetype+"\""+" optType=\"" + optType + "\" ";
						if(iscurrent == true){
							wfnodelindeXml += "iscurrent=\"true\""+"\t";
						}
						if(ispass == true){
							wfnodelindeXml += "ispass=\"true\""+"\t";
						}else{
							wfnodelindeXml += "ispass=\"false\""+"\t";
						}
						
						
						if("1".equals(nodeattribute)){
							wfnodelindeXml += "procType=\"fork\"/>";
						}else if("3".equals(nodeattribute) || "4".equals(nodeattribute)){
							wfnodelindeXml += "procType=\"join\"/>";
						}else {
							//System.out.println("nodetype");
							switch (Integer.parseInt(nodetype)) {
								case 0:
									wfnodelindeXml += "procType=\"create\"/>";
									break;
								case 1:
									wfnodelindeXml += "procType=\"approve\"/>";
									break;
								case 2:
									wfnodelindeXml += "procType=\"realize\"/>";
									break;
								case 3:
									wfnodelindeXml += "procType=\"process\"/>";
								default:
									break;
							}
							
						}
						wfnodelindeXml += "<VMLProperties shapetype=\"RoundRect\" x=\""+(nodeDecPoint[0] - 60)+"\"  y=\""+(nodeDecPoint[1] - 40)+"\""+"\t"
						+"width=\""+10+"\" height=\""+10+"\" zIndex=\""+-1+"\" nodeattribute=\""+nodeattribute+"\" passNum=\""+0+"\"/>"
					+"</Proc>";
				}			                     
		wfnodelindeXml += "</Procs><Steps>";
	//\u628a\u51fa\u53e3\u6761\u4ef6\u4fe1\u606f\u62fc\u63a5\u6210XML
	for (Iterator it=nodeLinkLineInfo.iterator();it.hasNext();) {
		
		Map lineBean = (Map)it.next();
		
		List lines = (List)lineBean.get("lines");
		String t_isPass = Util.null2String((String)lineBean.get("ispass"));
		
		boolean ispass = Boolean.parseBoolean(t_isPass);
		String linkid = (String)lineBean.get("linkid");
		String linkname = (String)lineBean.get("linkname");
		String directfrom = (String)lineBean.get("directfrom");
		String directto = (String)lineBean.get("directto");
		String startDirection = Util.getIntValue((String)lineBean.get("startDirection"), -1) + "";
		String endDirection = Util.getIntValue((String)lineBean.get("endDirection"), -1) + "";
		String points = (String)lineBean.get("points");
		String newPoints = (String)lineBean.get("newPoints");
		boolean hasCondition = ((Boolean)lineBean.get("hasCondition")).booleanValue();
		//String startDirection = "0";
		//String endDirection = "0";
		
		wfnodelindeXml += "<Step>"
			+"<BaseProperties id=\""+linkid+"\" startDirection=\""+startDirection+"\" endDirection=\""+endDirection+"\" text=\""+Util.toXmlText(linkname)+"\" from=\""+directfrom+"\" to=\""+directto+"\""+"\t"
			+"remindMsg=\"\" isBuildCode=\"false\" isreject=\"" + lineBean.get("isreject") + "\" ismustpass=\"0\""+"\t";
			if(ispass == true){
				wfnodelindeXml += "ispass=\"true\""+"\t";
			}else{
				wfnodelindeXml += "ispass=\"false\""+"\t";
			}
			wfnodelindeXml += "hasRole=\"false\" hasCondition=\"" + hasCondition + "\" />"
			+"<VMLProperties points=\"" + points + "\"" + " newPoints=\"" + newPoints + "\""
		    +" shapetype=\"PolyLine\" />"
			+"</Step>";
		
		for (Iterator lineIt=lines.iterator();lineIt.hasNext();) {
			Map line = (Map)lineIt.next();
		}
	}
	wfnodelindeXml += "</Steps>";
	wfnodelindeXml += "<Groups>";
	RecordSet rs = new RecordSet();
	rs.execute("select * from workflow_groupinfo where workflowid=" + workflowid);
    while (rs.next()) {
    	wfnodelindeXml += "<Group id=\"" + rs.getInt("id") 
    	+ "\" workflowid=\"" + rs.getInt("workflowid") 
    	+ "\" text=\"" + Util.toXmlText(rs.getString("groupname")) 
    	+ "\" direction=\"" + rs.getInt("direction") 
    	+ "\" x=\"" + rs.getDouble("x") 
    	+ "\" y=\"" + rs.getDouble("y") 
    	+ "\" width=\"" + rs.getDouble("width") 
    	+ "\" height=\"" + rs.getDouble("height") + "\" isNew=\"true\"/>";
    }
    wfnodelindeXml += "</Groups>";
    wfnodelindeXml += "</TopFlow>";
	//public String getWfNodeLineXml(String nodetype){
	//}
	//System.out.println("xml:\r\n" + wfnodelindeXml);
	response.getWriter().write(wfnodelindeXml);
	

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/1/workflowPicDisplayInfo.jsp"), -1318320777283318774L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n\r\n".toCharArray();
  }
}
