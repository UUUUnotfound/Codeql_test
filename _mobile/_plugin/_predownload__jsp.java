/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import net.sf.json.*;
import java.util.*;
import java.util.zip.*;
import java.security.*;
import java.io.*;
import weaver.general.*;
import weaver.file.*;
import weaver.hrm.*;
import weaver.conn.*;

public class _predownload__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;

  
  public String getHash(byte[] content, String hashType) throws Exception {  
      InputStream fis = new ByteArrayInputStream(content);  
      byte[] buffer = new byte[1024];
      MessageDigest md5 = MessageDigest.getInstance(hashType);
      int numRead = 0;
      while ((numRead = fis.read(buffer)) > 0) {
          md5.update(buffer, 0, numRead);
      }
      fis.close();
      return toHexString(md5.digest());
  }
  
  public char[] hexChar = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
  
  public String toHexString(byte[] b) {  
      StringBuilder sb = new StringBuilder(b.length * 2);  
      for (int i = 0; i < b.length; i++) {  
          sb.append(hexChar[(b[i] & 0xf0) >>> 4]);
          sb.append(hexChar[b[i] & 0x0f]);
      }
      return sb.toString();
  }  

  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("application/x-download");
    response.setCharacterEncoding("UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      weaver.mobile.plugin.ecology.service.PluginServiceImpl ps;
      ps = (weaver.mobile.plugin.ecology.service.PluginServiceImpl) pageContext.getAttribute("ps");
      if (ps == null) {
        ps = new weaver.mobile.plugin.ecology.service.PluginServiceImpl();
        pageContext.setAttribute("ps", ps);
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      
String url = Util.null2String(request.getParameter("url"));
String sessionkey = Util.null2String(request.getParameter("sessionkey"));

if(ps.verify(sessionkey)) {

	String filepath = "";
	String iszip = "";
	String filename = "";
	String isaesencrypt="";
	String aescode = "";
	String hashcode = "";
	
	if(Util.getIntValue(url)>0) {
		
		RecordSet rs = new RecordSet();
		
		String sql = "select isaesencrypt,aescode,imagefilename,imagefiletype,filerealpath,iszip from imagefile where imagefileid = " + url;
		
		rs.executeSql(sql);
		
		if(rs.next()) {
	
			filepath = rs.getString("filerealpath");
			iszip = rs.getString("iszip");
			filename = rs.getString("imagefilename");
			isaesencrypt = rs.getString("isaesencrypt");
			aescode = rs.getString("aescode");
		}
	} else {
		filepath = request.getRealPath(url);
		iszip = "0";
		filename = filepath.substring(filepath.lastIndexOf("/")+1);
	}

	File file = new File(filepath);
	byte[] content = null;
	
	if(file.exists()) {
		
		InputStream is = null;
		try {

			if (Util.getIntValue(iszip) > 0) {
				ZipInputStream zin = new ZipInputStream(new FileInputStream(file));
				if (zin.getNextEntry() != null)
					is = new BufferedInputStream(zin);
			} else {
				is = new BufferedInputStream(new FileInputStream(file));
			}
			if(isaesencrypt.equals("1")){
				is = AESCoder.decrypt(is,aescode);
			}
			byte[] rbs = new byte[2048];
			ByteArrayOutputStream outp = new ByteArrayOutputStream();
			int len = 0;
			while (((len = is.read(rbs)) > 0)) {
				outp.write(rbs, 0, len);
			}

			content = outp.toByteArray();
			
			outp.flush();

		} catch (Exception e) {
			//System.out.println("Error!");
			e.printStackTrace();
		} finally {
			if (is != null) {
				is.close();
				is = null;
			}
		}

		hashcode = getHash(content,"MD5");
		
	}
	
	Map result = new HashMap();

	result.put("hashcode", hashcode);

	JSONObject jo = JSONObject.fromObject(result);
	out.println(jo);
}

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/PreDownload.jsp"), 3847010718054588469L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
    _jsp_string1 = "\r\n\r\n".toCharArray();
  }
}
