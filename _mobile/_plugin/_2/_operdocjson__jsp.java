/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin._2;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import net.sf.json.*;
import java.util.*;
import weaver.general.*;
import weaver.hrm.*;

public class _operdocjson__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      weaver.docs.webservices.DocServiceForMobile DocServiceForMobile;
      DocServiceForMobile = (weaver.docs.webservices.DocServiceForMobile) pageContext.getAttribute("DocServiceForMobile");
      if (DocServiceForMobile == null) {
        DocServiceForMobile = new weaver.docs.webservices.DocServiceForMobile();
        pageContext.setAttribute("DocServiceForMobile", DocServiceForMobile);
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      
out.clearBuffer();
User user = HrmUserVarify.getUser (request , response) ;
if(user==null) {
	Map result = new HashMap();
	//\u672a\u767b\u5f55\u6216\u767b\u5f55\u8d85\u65f6
	result.put("result", "200001");
	result.put("error", "\u672a\u767b\u5f55\u6216\u767b\u5f55\u8d85");
			
	JSONObject jo = JSONObject.fromObject(result);
	out.println(jo);
	
	return;
}

response.setContentType("application/json;charset=UTF-8");
//\u64cd\u4f5c\u65b9\u5f0f  deletedoc\uff1a\u5220\u9664\u6587\u6863  addshare\uff1a\u65b0\u589e\u5171\u4eab  docollect\uff1a\u6536\u85cf  undocollect\uff1a\u53d6\u6d88\u6536\u85cf  createdoc\uff1a\u53d6\u6d88\u6536\u85cf
String operation = Util.null2String(request.getParameter("operation"));
if(!operation.equals("addshare")
	&&!operation.equals("deletedoc")
	&&!operation.equals("docollect")
	&&!operation.equals("undocollect")
	&&!operation.equals("createdoc")
	){
	Map result = new HashMap();
	//operation\u53c2\u6570\u672a\u8bbe\u7f6e\u6b63\u786e
	result.put("result", "200002");
	result.put("error", "operation\u53c2\u6570\u672a\u8bbe\u7f6e\u6b63\u786e");
	
	JSONObject jo = JSONObject.fromObject(result);
	out.println(jo);
	
	return;

}


String documentid = Util.null2String(request.getParameter("documentid"));

String shareuserids = Util.null2String(request.getParameter("shareuserids"));

Map result =null;
if(operation.equals("addshare")){
	result = DocServiceForMobile.addShare(documentid,shareuserids,user);
}else if(operation.equals("deletedoc")){
	result = DocServiceForMobile.deleteDoc(documentid,user);
}else if(operation.equals("docollect")){
	result = DocServiceForMobile.doCollect(documentid,user);
}else if(operation.equals("undocollect")){
	result = DocServiceForMobile.undoCollect(documentid,user);
}else if(operation.equals("createdoc")){
	result = DocServiceForMobile.createDoc(request,user);
}


JSONObject jo = JSONObject.fromObject(result);

out.println(jo);

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/2/operDocJSON.jsp"), 4054259018658800569L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
  }
}
