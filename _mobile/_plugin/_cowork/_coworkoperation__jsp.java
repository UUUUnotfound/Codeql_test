/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin._cowork;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.*;
import weaver.file.FileUpload;
import weaver.general.Util;
import net.sf.json.JSONObject;
import java.net.URLDecoder;
import weaver.hrm.*;

public class _coworkoperation__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("application/json;charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      weaver.mobile.plugin.ecology.service.CoworkService CoworkService;
      CoworkService = (weaver.mobile.plugin.ecology.service.CoworkService) pageContext.getAttribute("CoworkService");
      if (CoworkService == null) {
        CoworkService = new weaver.mobile.plugin.ecology.service.CoworkService();
        pageContext.setAttribute("CoworkService", CoworkService);
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      
out.clearBuffer();
User user = HrmUserVarify.getUser (request , response) ;
if(user==null) {
	Map result = new HashMap();
	//\u672a\u767b\u5f55\u6216\u767b\u5f55\u8d85\u65f6
	result.put("error", "200001");
	
	JSONObject jo = JSONObject.fromObject(result);
	out.println(jo);
	
	return;
}

request.setCharacterEncoding("UTF-8");

FileUpload fu=new FileUpload(request);
int coworkid = Util.getIntValue(fu.getParameter("coworkid"));
String operation = Util.null2String(fu.getParameter("operation"));
int replayid = Util.getIntValue(fu.getParameter("replayid"), 0);
int pageIndex = Util.getIntValue(fu.getParameter("pageindex"), 1);
int pageSize = Util.getIntValue(fu.getParameter("pagesize"), 10);
String sessionkey = Util.null2String(fu.getParameter("sessionkey"));
String remark = Util.null2String(fu.getParameter("remark"));
remark = URLDecoder.decode(remark,"utf-8");

String keyword = Util.null2String(fu.getParameter("keyword"));
keyword = URLDecoder.decode(keyword, "utf-8");

int labelid = Util.getIntValue(fu.getParameter("labelid"), 0);

Map result = new HashMap();

if("getCoworkDetail".equals(operation)) {
	result = CoworkService.getCoworkDtl(coworkid, pageIndex, pageSize, user);
} else if("saveCowork".equals(operation))	{
	String replyType = Util.null2String(fu.getParameter("replyType"));
	String topdiscussid = Util.null2String(fu.getParameter("topdiscussid"));
	Map params=new HashMap();
	params.put("replyType",replyType);
	params.put("topdiscussid",topdiscussid);
	result = CoworkService.submitCowork(user, remark, coworkid, replayid,params);
} else if("getCoworkList".equals(operation)) {
	List conditions = new ArrayList();
	conditions.add(""+labelid);
	
	if(keyword!=null && !"".equals(keyword)) {
		conditions.add(" (name like '%"+keyword+"%') ");
	}
	
	result = CoworkService.getCoworkList(conditions, pageIndex, pageSize, user);
	
} else if("important".equals(operation)) {
	result = CoworkService.markCoworkItemAsType(coworkid, "important", user);
} else if("normal".equals(operation)) {
	result = CoworkService.markCoworkItemAsType(coworkid, "normal", user);
}

JSONObject json = JSONObject.fromObject(result);
out.print(json.toString());


    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/cowork/CoworkOperation.jsp"), -9010787049125664445L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string1;
  private final static char []_jsp_string0;
  static {
    _jsp_string1 = "\r\n".toCharArray();
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
  }
}
