/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp._mobile._plugin._msign;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import net.sf.json.*;
import java.util.*;
import java.text.*;
import weaver.file.*;
import weaver.general.*;
import weaver.hrm.*;
import weaver.mobile.sign.*;

public class _postjson__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      weaver.mobile.plugin.ecology.service.ScheduleService scheduleService;
      scheduleService = (weaver.mobile.plugin.ecology.service.ScheduleService) pageContext.getAttribute("scheduleService");
      if (scheduleService == null) {
        scheduleService = new weaver.mobile.plugin.ecology.service.ScheduleService();
        pageContext.setAttribute("scheduleService", scheduleService);
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      
request.setCharacterEncoding("UTF-8");
User user = HrmUserVarify.getUser (request , response) ;
if(user==null) {
	Map result = new HashMap();
	//\u672a\u767b\u5f55\u6216\u767b\u5f55\u8d85\u65f6
	result.put("error", "remote server session time out");
	
	JSONObject jo = JSONObject.fromObject(result);
	out.println(jo);
	
	return;
}

response.setContentType("application/json;charset=UTF-8");

FileUpload fu = new FileUpload(request);

String module = Util.null2String(fu.getParameter("module"));
String scope = Util.null2String(fu.getParameter("scope"));
String operation = Util.null2String(fu.getParameter("operation"));
Map result = new HashMap();
if("create".equals(operation)) {
	try{
		MobileSign ms = new MobileSign();
		String latitudeLongitude = Util.null2String(fu.getParameter("latitudeLongitude"));
		String address = Util.null2String(fu.getParameter("address"));
		String remark = Util.null2String(fu.getParameter("remark"));
		String attachmentIds = Util.null2String(fu.getParameter("attachmentIds"));
		if(!latitudeLongitude.equals("")){
			String[]  ll = latitudeLongitude.split(",");
			ms.setLatitude(ll[0]);
			ms.setLongitude(ll[1]);
		}else{
			ms.setLatitude("0");
			ms.setLongitude("0");
		}
		Date curDate =  new Date();
		SimpleDateFormat myFmt=new SimpleDateFormat("yyyy-MM-dd");
		String dateStr = myFmt.format(curDate);
		SimpleDateFormat myFmt1=new SimpleDateFormat("HH:mm:ss");
		String timeStr = myFmt1.format(curDate);
		ms.setOperaterId(user.getUID()+"");
		ms.setOperateType(SignType.MOBILE_SIGN);
		ms.setOperateDate(dateStr);
		ms.setOperateTime(timeStr);
		ms.setRemark(remark);
		ms.setAddress(address);
		ms.setAttachmentIds(attachmentIds);
		ms.save();
		result.put("result", "1");
	}catch(Exception e){
		e.printStackTrace();
		result.put("result", "0");
	}
}else if("getList".equals(operation)){
		String pageindex = Util.null2String(fu.getParameter("pageindex"));
		String pagesize = Util.null2String(fu.getParameter("pagesize"));
		String beginQueryDate = Util.null2String(fu.getParameter("beginQueryDate"));
		String endQueryDate = Util.null2String(fu.getParameter("endQueryDate"));
		String operaterId = Util.null2String(fu.getParameter("operaterId"));
		String signType = Util.null2String(fu.getParameter("signType"));
		String tempOperaterId = "";
		if("".equals(operaterId)){
			tempOperaterId = user.getUID()+"";
		}else{
			tempOperaterId = operaterId;
		}
		if("".equals(pagesize)){
			pagesize = "15";
		}
	  	result = SignService.getSign(tempOperaterId,beginQueryDate,endQueryDate,Integer.parseInt(pageindex),Integer.parseInt(pagesize),signType);
}
JSONObject jo = JSONObject.fromObject(result);
//System.out.println("######"+jo.toString());
out.println(jo);

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("mobile/plugin/msign/postjson.jsp"), 8212838913939142417L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string1;
  private final static char []_jsp_string0;
  static {
    _jsp_string1 = "\r\n".toCharArray();
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
  }
}
